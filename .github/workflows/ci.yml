name: ci
on:
  push:

env:
  CLANG_VERSION: "15.0.2"
  GCC_VERSION: "11"
  WINDOWS_VERSION: "windows-2019"
  UBUNTU_VERSION: "ubuntu-20.04"
  VERBOSE: 1

jobs:
  CI:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - $env.UBUNTU_VERSION
          - $env.WINDOWS_VERSION
        # - macos-10.15 for as it takes too long to catch available runner
        compiler:
          - clang
          - gcc
        generator:
          - "Ninja Multi-Config"
        build_type:
          - release

        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: $env.WINDOWS_VERSION
            compiler: gcc

        include:
          - os: $env.WINDOWS_VERSION
            build_type: Release
            package_generator: ZIP

          - os: $env.UBUNTU_VERSION
            build_type: Release
            package_generator: TAR
    env:
      PRESET: ${{'${{matrix.compiler}}'//-*}}-${{matrix.build_type}}-mode
    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - uses: actions/checkout@v3
      
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}

      - name: Configure CMake
        run: |
          cmake --preset ${{env.PRESET}}

      - name: Build
        run: |
          cmake --build --preset ${{env.PRESET}}

      - name: Test
        working-directory: ./out/build/${{env.PRESET}}
        run: |
          ctest -C ${{matrix.build_type}}
          
      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ./out/build/${{env.PRESET}}
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}
